name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run Ruff linting
        run: poetry run ruff check src/ tests/

      - name: Run Ruff formatting check
        run: poetry run ruff format --check src/ tests/

      - name: Run type checking
        run: poetry run mypy src/ --ignore-missing-imports

      - name: Run security check
        run: poetry run bandit -r src/ -c pyproject.toml

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint]
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run tests with coverage
        env:
          # Basic test environment variables
          REDIS_URL: "redis://localhost:6379"
          GOOGLE_API_KEY: "test_key"
          GOOGLE_GENAI_API_KEY: "test_key"
          X_CLIENT_ID: "test_client_id"
          X_CLIENT_SECRET: "test_client_secret"
          BITVAVO_API_KEY: "test_bitvavo_key"
          BITVAVO_API_SECRET: "test_bitvavo_secret"
        run: |
          poetry run pytest tests/ -v --tb=short \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=80

      - name: Upload coverage to Codecov
        if: success() || failure()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage summary
        if: always()
        run: |
          if [ -f coverage.xml ]; then
            # Extract coverage percentage from the XML file
            COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); line_rate = root.get('line-rate', '0'); print(f'{float(line_rate) * 100:.1f}%')" 2>/dev/null || echo "N/A")
          else
            COVERAGE="N/A"
          fi

          if [ "${{ job.status }}" = "success" ]; then
            STATUS="✅ Tests passed"
            COVERAGE_STATUS="✅ Coverage: $COVERAGE"
          else
            STATUS="❌ Tests failed" 
            COVERAGE_STATUS="❌ Coverage check failed"
          fi

          {
            echo "## 🧪 Test Results"
            echo "- **Status:** $STATUS"
            echo "- **Coverage:** $COVERAGE_STATUS"
            echo "- **Environment:** Python 3.13 on Ubuntu"
            echo "- **Minimum Required:** 80%"
          } >> "$GITHUB_STEP_SUMMARY"

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Generate detailed coverage report
        env:
          REDIS_URL: "redis://localhost:6379"
          GOOGLE_API_KEY: "test_key"
          GOOGLE_GENAI_API_KEY: "test_key"
          X_CLIENT_ID: "test_client_id"
          X_CLIENT_SECRET: "test_client_secret"
          BITVAVO_API_KEY: "test_bitvavo_key"
          BITVAVO_API_SECRET: "test_bitvavo_secret"
        run: |
          poetry run pytest tests/ --cov=src --cov-report=html --cov-report=term-missing --quiet

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 30

      - name: Coverage Summary
        run: |
          {
            echo "## 📊 Detailed Coverage Report"
            echo "- **HTML Report:** Available in job artifacts"
            echo "- **Retention:** 30 days"
            echo "- **Download:** Click on 'coverage-report' artifact above"
          } >> "$GITHUB_STEP_SUMMARY"
