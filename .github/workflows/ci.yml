name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --with lint

      - name: Run Ruff checks
        run: poetry run ruff check src/ tests/

      - name: Run Ruff formatting check
        run: poetry run ruff format --check src/ tests/

      - name: Run MyPy type checking
        run: poetry run mypy src/

      - name: Run Bandit security linting
        run: poetry run bandit -r src/ -c pyproject.toml -f json -o bandit-report.json

      - name: Convert Bandit JSON to SARIF
        run: |
          python3 -c "
          import json
          import sys
          
          # Read bandit JSON
          try:
              with open('bandit-report.json', 'r') as f:
                  data = json.load(f)
          except FileNotFoundError:
              print('Bandit report not found, creating minimal SARIF')
              data = {'results': []}
          
          # Check if there are any results
          results = data.get('results', [])
          
          sarif = {
              '\$schema': 'https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json',
              'version': '2.1.0',
              'runs': [{
                  'tool': {
                      'driver': {
                          'name': 'Bandit',
                          'version': '1.8.6',
                          'informationUri': 'https://bandit.readthedocs.io/'
                      }
                  },
                  'results': []
              }]
          }
          
          # Convert bandit results to SARIF format if any exist
          if results:
              sarif_results = []
              for result in results:
                  sarif_result = {
                      'ruleId': result.get('test_id', 'unknown'),
                      'level': result.get('issue_severity', 'warning').lower(),
                      'message': {
                          'text': result.get('issue_text', '')
                      },
                      'locations': [{
                          'physicalLocation': {
                              'artifactLocation': {
                                  'uri': result.get('filename', '')
                              },
                              'region': {
                                  'startLine': result.get('line_number', 1)
                              }
                          }
                      }]
                  }
                  sarif_results.append(sarif_result)
              
              sarif['runs'][0]['results'] = sarif_results
          
          with open('bandit-report.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          
          print(f'Converted {len(results)} bandit results to SARIF format')
          "

      - name: Upload Bandit SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit-report.sarif
          category: bandit

  test:
    runs-on: ubuntu-latest
    needs: [lint] # Test alleen als linting succesvol is
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Install project
        run: poetry install --no-interaction

      - name: Run pre-commit hooks
        run: |
          poetry run pre-commit install
          poetry run pre-commit run --all-files

      - name: Run tests with coverage
        env:
          # Configuration variables (safe to use vars.)
          REDIS_URL: ${{ vars.REDIS_URL || 'redis://localhost:6379' }}
          X_URL: ${{ vars.X_URL || 'https://api.twitter.com' }}
          X_TWEETS_ENDPOINT: ${{ vars.X_TWEETS_ENDPOINT || '/2/tweets' }}
          X_AUTHORIZE_ENDPOINT: ${{ vars.X_AUTHORIZE_ENDPOINT || '/oauth/authorize' }}
          X_TOKEN_ENDPOINT: ${{ vars.X_TOKEN_ENDPOINT || '/oauth/access_token' }}
          X_PERSONALIZED_TRENDS_ENDPOINT: ${{ vars.X_PERSONALIZED_TRENDS_ENDPOINT || '/1.1/trends/available.json' }}
          X_USER_ID: ${{ vars.X_USER_ID || '123456789' }}
          GOOGLE_CSE_ID: ${{ vars.GOOGLE_CSE_ID || '52532b3c697ee4a4c' }}
          GOOGLE_GENAI_USE_VERTEXAI: ${{ vars.GOOGLE_GENAI_USE_VERTEXAI || '0' }}
          # Secrets (use secrets. with fallback)
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'test_key' }}
          GOOGLE_GENAI_API_KEY: ${{ secrets.GOOGLE_GENAI_API_KEY || 'test_key' }}
          X_API_KEY: ${{ secrets.X_API_KEY || 'test_key' }}
          X_API_SECRET: ${{ secrets.X_API_SECRET || 'test_secret' }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN || 'test_token' }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET || 'test_secret' }}
          X_API_CLIENT_ID: ${{ secrets.X_API_CLIENT_ID || 'test_client_id' }}
          X_API_CLIENT_SECRET: ${{ secrets.X_API_CLIENT_SECRET || 'test_client_secret' }}
          X_BEARER_TOKEN: ${{ secrets.X_BEARER_TOKEN || 'test_bearer_token' }}
          BITVAVO_API_KEY: ${{ secrets.BITVAVO_API_KEY || 'test_key' }}
          BITVAVO_API_SECRET: ${{ secrets.BITVAVO_API_SECRET || 'test_secret' }}
        run: |
          poetry run pytest --cov=src/agentic_crypto_influencer --cov-report=xml --cov-report=term-missing --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
