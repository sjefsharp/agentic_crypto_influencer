name: CD

on:
  push:
    tags:
      - "v*.*.*"
  release:
    types: [published]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Run tests
        env:
          # Configuration variables (safe to use vars.)
          REDIS_URL: ${{ vars.REDIS_URL || 'redis://localhost:6379' }}
          X_URL: ${{ vars.X_URL || 'https://api.twitter.com' }}
          X_TWEETS_ENDPOINT: ${{ vars.X_TWEETS_ENDPOINT || '/2/tweets' }}
          X_AUTHORIZE_ENDPOINT: ${{ vars.X_AUTHORIZE_ENDPOINT || '/oauth/authorize' }}
          X_TOKEN_ENDPOINT: ${{ vars.X_TOKEN_ENDPOINT || '/oauth/access_token' }}
          X_PERSONALIZED_TRENDS_ENDPOINT: ${{ vars.X_PERSONALIZED_TRENDS_ENDPOINT || '/1.1/trends/available.json' }}
          X_USER_ID: ${{ vars.X_USER_ID || '123456789' }}
          GOOGLE_CSE_ID: ${{ vars.GOOGLE_CSE_ID || '52532b3c697ee4a4c' }}
          GOOGLE_GENAI_USE_VERTEXAI: ${{ vars.GOOGLE_GENAI_USE_VERTEXAI || '0' }}
          # Secrets (use secrets. with fallback)
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'test_key' }}
          GOOGLE_GENAI_API_KEY: ${{ secrets.GOOGLE_GENAI_API_KEY || 'test_key' }}
          X_API_KEY: ${{ secrets.X_API_KEY || 'test_key' }}
          X_API_SECRET: ${{ secrets.X_API_SECRET || 'test_secret' }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN || 'test_token' }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET || 'test_secret' }}
          X_API_CLIENT_ID: ${{ secrets.X_API_CLIENT_ID || 'test_client_id' }}
          X_API_CLIENT_SECRET: ${{ secrets.X_API_CLIENT_SECRET || 'test_client_secret' }}
          X_BEARER_TOKEN: ${{ secrets.X_BEARER_TOKEN || 'test_bearer_token' }}
          BITVAVO_API_KEY: ${{ secrets.BITVAVO_API_KEY || 'test_key' }}
          BITVAVO_API_SECRET: ${{ secrets.BITVAVO_API_SECRET || 'test_secret' }}
        run: poetry run pytest --cov=src/agentic_crypto_influencer --cov-fail-under=80

      - name: Run Bandit security linting
        run: poetry run bandit -r src/ -c pyproject.toml || true

      - name: Build package
        run: poetry build

      - name: Create GitHub release notes
        if: github.event_name == 'release'
        run: |
          echo "ðŸŽ‰ Release ${{ github.event.release.tag_name }} published!" >> release_notes.md
          echo "" >> release_notes.md
          echo "## What's Changed" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  deploy-staging:
    runs-on: ubuntu-latest
    permissions: {}
    if: github.ref == 'refs/heads/develop'
    needs: [build_and_test]

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment"
          # Add your staging deployment commands here
          # For example: docker build, docker push, kubectl apply, etc.

  deploy-production:
    runs-on: ubuntu-latest
    permissions: {}
    if: github.event_name == 'release'
    needs: [build_and_test]

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist

      - name: Deploy to production
        run: |
          echo "ðŸŽ¯ Deploying to production environment"
          # Add your production deployment commands here
          # For example: docker build, docker push, kubectl apply, etc.
