name: CD

on:
  push:
    tags:
      - "v*.*.*"
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Set up test environment
        run: |
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "X_URL=https://api.twitter.com" >> $GITHUB_ENV
          echo "X_TWEETS_ENDPOINT=/2/tweets" >> $GITHUB_ENV
          echo "X_AUTHORIZE_ENDPOINT=/oauth/authorize" >> $GITHUB_ENV
          echo "X_TOKEN_ENDPOINT=/oauth/access_token" >> $GITHUB_ENV
          echo "X_PERSONALIZED_TRENDS_ENDPOINT=/1.1/trends/available.json" >> $GITHUB_ENV
          # Set test values for missing secrets (secrets are automatically available as env vars)
          [ -z "$GOOGLE_API_KEY" ] && echo "GOOGLE_API_KEY=test_key" >> $GITHUB_ENV || true
          [ -z "$GOOGLE_GENAI_API_KEY" ] && echo "GOOGLE_GENAI_API_KEY=test_key" >> $GITHUB_ENV || true
          [ -z "$X_API_KEY" ] && echo "X_API_KEY=test_key" >> $GITHUB_ENV || true
          [ -z "$X_API_SECRET" ] && echo "X_API_SECRET=test_secret" >> $GITHUB_ENV || true
          [ -z "$X_ACCESS_TOKEN" ] && echo "X_ACCESS_TOKEN=test_token" >> $GITHUB_ENV || true
          [ -z "$X_ACCESS_TOKEN_SECRET" ] && echo "X_ACCESS_TOKEN_SECRET=test_secret" >> $GITHUB_ENV || true
          [ -z "$BITVAVO_API_KEY" ] && echo "BITVAVO_API_KEY=test_key" >> $GITHUB_ENV || true
          [ -z "$BITVAVO_API_SECRET" ] && echo "BITVAVO_API_SECRET=test_secret" >> $GITHUB_ENV || true

      - name: Run tests
        run: poetry run pytest --cov=src/agentic_crypto_influencer --cov-fail-under=80

      - name: Build package
        run: poetry build

      - name: Create GitHub release notes
        if: github.event_name == 'release'
        run: |
          echo "ðŸŽ‰ Release ${{ github.event.release.tag_name }} published!" >> release_notes.md
          echo "" >> release_notes.md
          echo "## What's Changed" >> release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: [release]

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment"
          # Add your staging deployment commands here
          # For example: docker build, docker push, kubectl apply, etc.

  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'release'
    needs: [release]

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "ðŸŽ¯ Deploying to production environment"
          # Add your production deployment commands here
          # For example: docker build, docker push, kubectl apply, etc.
