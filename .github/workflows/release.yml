name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version type to bump"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: "Release notes"
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(poetry version --short)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        if: github.event_name == 'workflow_dispatch'
        run: |
          poetry version ${{ github.event.inputs.version_type }}

      - name: Generate changelog
        id: changelog
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual release with custom notes
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## What's Changed" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "${{ github.event.inputs.release_notes }}" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.current_version }}...v$(poetry version --short)" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # Automatic release from main branch
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "## What's Changed" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~1")..HEAD >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.current_version }}...v$(poetry version --short)" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create tag
        run: |
          NEW_VERSION=$(poetry version --short)
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml poetry.lock
          git commit -m "chore: bump version to $NEW_VERSION" || true
          git tag "v$NEW_VERSION"

      - name: Push changes
        run: |
          git push origin main --tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v$(poetry version --short)
          release_name: Release v$(poetry version --short)
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Build and publish
        run: |
          poetry build
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry publish

      - name: Notify on success
        if: success()
        run: |
          echo "üéâ Release v$(poetry version --short) successfully created and published!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Release failed. Please check the logs."
