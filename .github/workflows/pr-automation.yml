name: PR Automation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Set up test environment
        run: |
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY || 'test_key' }}" >> $GITHUB_ENV
          echo "GOOGLE_GENAI_API_KEY=${{ secrets.GOOGLE_GENAI_API_KEY || 'test_key' }}" >> $GITHUB_ENV
          echo "X_API_KEY=${{ secrets.X_API_KEY || 'test_key' }}" >> $GITHUB_ENV
          echo "X_API_SECRET=${{ secrets.X_API_SECRET || 'test_secret' }}" >> $GITHUB_ENV
          echo "X_ACCESS_TOKEN=${{ secrets.X_ACCESS_TOKEN || 'test_token' }}" >> $GITHUB_ENV
          echo "X_ACCESS_TOKEN_SECRET=${{ secrets.X_ACCESS_TOKEN_SECRET || 'test_secret' }}" >> $GITHUB_ENV
          echo "BITVAVO_API_KEY=${{ secrets.BITVAVO_API_KEY || 'test_key' }}" >> $GITHUB_ENV
          echo "BITVAVO_API_SECRET=${{ secrets.BITVAVO_API_SECRET || 'test_secret' }}" >> $GITHUB_ENV
          echo "X_URL=https://api.twitter.com" >> $GITHUB_ENV
          echo "X_TWEETS_ENDPOINT=/2/tweets" >> $GITHUB_ENV
          echo "X_AUTHORIZE_ENDPOINT=/oauth/authorize" >> $GITHUB_ENV
          echo "X_TOKEN_ENDPOINT=/oauth/access_token" >> $GITHUB_ENV
          echo "X_PERSONALIZED_TRENDS_ENDPOINT=/1.1/trends/available.json" >> $GITHUB_ENV

      - name: Run tests
        run: poetry run pytest --cov=src/agentic_crypto_influencer --cov-fail-under=80 --junitxml=test-results.xml

      - name: Check test coverage
        run: |
          COVERAGE=$(poetry run pytest --cov=src/agentic_crypto_influencer --cov-report=term-missing | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage is below 80%: ${COVERAGE}%"
            exit 1
          else
            echo "✅ Coverage is good: ${COVERAGE}%"
          fi

      - name: Comment PR with coverage
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: "test-results.xml"
          reporter: java-junit
          fail-on-error: false

  pr-validation:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - uses: actions/checkout@v4

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
          requireScope: false

      - name: Check PR size
        run: |
          # Check if PR has too many changes
          CHANGED_FILES=$(git diff --name-only HEAD~1 | wc -l)
          if [ "$CHANGED_FILES" -gt 50 ]; then
            echo "⚠️ Large PR detected: $CHANGED_FILES files changed"
          else
            echo "✅ PR size looks good: $CHANGED_FILES files changed"
          fi

      - name: Label PR based on branch
        if: github.event.pull_request.head.ref != github.event.pull_request.base.ref
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" == feature/* ]]; then
            echo "PR from feature branch"
            # Add feature label
          elif [[ "${{ github.event.pull_request.head.ref }}" == hotfix/* ]]; then
            echo "PR from hotfix branch"
            # Add hotfix label
          elif [[ "${{ github.event.pull_request.head.ref }}" == release/* ]]; then
            echo "PR from release branch"
            # Add release label
          fi
