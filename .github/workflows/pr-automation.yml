name: PR Automation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.8.3
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run tests
        env:
          # Configuration variables (safe to use vars.)
          REDIS_URL: ${{ vars.REDIS_URL || 'redis://localhost:6379' }}
          X_URL: ${{ vars.X_URL || 'https://api.twitter.com' }}
          X_TWEETS_ENDPOINT: ${{ vars.X_TWEETS_ENDPOINT || '/2/tweets' }}
          X_AUTHORIZE_ENDPOINT: ${{ vars.X_AUTHORIZE_ENDPOINT || '/oauth/authorize' }}
          X_TOKEN_ENDPOINT: ${{ vars.X_TOKEN_ENDPOINT || '/oauth/access_token' }}
          X_PERSONALIZED_TRENDS_ENDPOINT: ${{ vars.X_PERSONALIZED_TRENDS_ENDPOINT || '/1.1/trends/available.json' }}
          X_USER_ID: ${{ vars.X_USER_ID || '123456789' }}
          GOOGLE_CSE_ID: ${{ vars.GOOGLE_CSE_ID || '52532b3c697ee4a4c' }}
          GOOGLE_GENAI_USE_VERTEXAI: ${{ vars.GOOGLE_GENAI_USE_VERTEXAI || '0' }}
          # Secrets (use secrets. with fallback)
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'test_key' }}
          GOOGLE_GENAI_API_KEY: ${{ secrets.GOOGLE_GENAI_API_KEY || 'test_key' }}
          X_API_KEY: ${{ secrets.X_API_KEY || 'test_key' }}
          X_API_SECRET: ${{ secrets.X_API_SECRET || 'test_secret' }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN || 'test_token' }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET || 'test_secret' }}
          X_API_CLIENT_ID: ${{ secrets.X_API_CLIENT_ID || 'test_client_id' }}
          X_API_CLIENT_SECRET: ${{ secrets.X_API_CLIENT_SECRET || 'test_client_secret' }}
          X_BEARER_TOKEN: ${{ secrets.X_BEARER_TOKEN || 'test_bearer_token' }}
          BITVAVO_API_KEY: ${{ secrets.BITVAVO_API_KEY || 'test_key' }}
          BITVAVO_API_SECRET: ${{ secrets.BITVAVO_API_SECRET || 'test_secret' }}
        run: poetry run pytest --cov=src/agentic_crypto_influencer --cov-fail-under=80 --junitxml=test-results.xml

      - name: Check test coverage
        run: |
          COVERAGE=$(poetry run pytest --cov=src/agentic_crypto_influencer --cov-report=term-missing | grep "TOTAL" | awk '{print $6}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage is below 80%: ${COVERAGE}%"
            exit 1
          else
            echo "✅ Coverage is good: ${COVERAGE}%"
          fi

      - name: Run Bandit security linting
        run: poetry run bandit -r src/ -c pyproject.toml || true

      - name: Comment PR with coverage
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: "test-results.xml"
          reporter: java-junit
          fail-on-error: false

  pr-validation:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - uses: actions/checkout@v4

      - name: Validate PR title
        id: pr-title-check
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
            security
            ci
            build
          requireScope: false
          subjectPattern: .*
          subjectPatternError: |
            Subject must not be empty
        continue-on-error: true

      - name: PR title validation result
        if: steps.pr-title-check.outcome == 'failure'
        run: |
          echo "⚠️ PR title doesn't follow conventional commit format"
          echo "Consider updating the PR title to start with: feat:, fix:, docs:, style:, refactor:, perf:, test:, chore:, security:, ci:, or build:"
          echo "Current title: ${{ github.event.pull_request.title }}"

      - name: Check PR size
        run: |
          # Check if PR has too many changes
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | wc -l)
          if [ "$CHANGED_FILES" -gt 50 ]; then
            echo "⚠️ Large PR detected: $CHANGED_FILES files changed"
          else
            echo "✅ PR size looks good: $CHANGED_FILES files changed"
          fi

      - name: Label PR based on branch
        if: github.event.pull_request.head.ref != github.event.pull_request.base.ref
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" == feature/* ]]; then
            echo "PR from feature branch"
            # Add feature label
          elif [[ "${{ github.event.pull_request.head.ref }}" == hotfix/* ]]; then
            echo "PR from hotfix branch"
            # Add hotfix label
          elif [[ "${{ github.event.pull_request.head.ref }}" == release/* ]]; then
            echo "PR from release branch"
            # Add release label
          fi
