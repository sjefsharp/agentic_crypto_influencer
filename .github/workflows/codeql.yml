# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "30 0 * * 2"

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions
            build-mode: none
          - language: python
            build-mode: none
        # CodeQL supports the following values keywords for 'language': 'actions', 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'rust', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Add any setup steps before running the `github/codeql-action/init` action.
      # This includes steps like installing compilers or runtimes (`actions/setup-node`
      # or others). This is typically only required for manual builds.
      # - name: Setup runtime (example)
      #   uses: actions/setup-example@v1

      # Bandit security scan for Python
      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        if: matrix.language == 'python'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        if: matrix.language == 'python'
        run: poetry install --no-interaction --with lint

      - name: Run Bandit security linting
        if: matrix.language == 'python'
        run: |
          poetry run bandit -r src/ -c pyproject.toml -f json -o bandit-report.json

      - name: Convert Bandit JSON to SARIF
        if: matrix.language == 'python'
        run: |
          python3 -c "
          import json
          import sys
          
          # Read bandit JSON
          try:
              with open('bandit-report.json', 'r') as f:
                  data = json.load(f)
          except FileNotFoundError:
              print('Bandit report not found, creating minimal SARIF')
              data = {'results': []}
          
          # Check if there are any results
          results = data.get('results', [])
          
          sarif = {
              '\$schema': 'https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json',
              'version': '2.1.0',
              'runs': [{
                  'tool': {
                      'driver': {
                          'name': 'Bandit',
                          'version': '1.8.6',
                          'informationUri': 'https://bandit.readthedocs.io/'
                      }
                  },
                  'results': []
              }]
          }
          
          # Convert bandit results to SARIF format if any exist
          if results:
              sarif_results = []
              for result in results:
                  sarif_result = {
                      'ruleId': result.get('test_id', 'unknown'),
                      'level': result.get('issue_severity', 'warning').lower(),
                      'message': {
                          'text': result.get('issue_text', '')
                      },
                      'locations': [{
                          'physicalLocation': {
                              'artifactLocation': {
                                  'uri': result.get('filename', '')
                              },
                              'region': {
                                  'startLine': result.get('line_number', 1)
                              }
                          }
                      }]
                  }
                  sarif_results.append(sarif_result)
              
              sarif['runs'][0]['results'] = sarif_results
          
          with open('bandit-report.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          
          print(f'Converted {len(results)} bandit results to SARIF format')
          "

      - name: Upload Bandit SARIF results
        if: matrix.language == 'python'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-report.sarif
          category: bandit

      - name: Upload Bandit results
        if: matrix.language == 'python'
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report-${{ matrix.language }}
          path: bandit-report.json

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

      # If the analyze step fails for one of the languages you are analyzing with
      # "We were unable to automatically build your code", modify the matrix above
      # to set the build mode to "manual" for that language. Then modify this step
      # to build your code.
      # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
      # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'If you are using a "manual" build mode for one or more of the' \
            'languages you are analyzing, replace this with the commands to build' \
            'your code, for example:'
          echo '  make bootstrap'
          echo '  make release'
          exit 1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
