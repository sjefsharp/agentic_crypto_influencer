[project]
name = "agentic-crypto-influencer"
description = ""
authors = [
    {name = "Sjef Jenniskens", email = "14937399+sjefsharp@users.noreply.github.com"}
]
requires-python = ">=3.13"
dependencies = [
    "autogen-agentchat (>=0.7.4,<0.8.0)",
    "autogen-ext (>=0.7.4,<0.8.0)",
    "openai (>=1.0.0,<2.0.0)",
    "tiktoken (>=0.5.0,<1.0.0)",
    "python-dotenv (>=1.1.1,<2.0.0)",
    "python-bitvavo-api (>=1.4.3,<2.0.0)",
    "redis (>=6.4.0,<7.0.0)",
    "google-genai (>=1.32.0,<2.0.0)",
    "requests-oauthlib (>=2.0.0,<3.0.0)",
    "flask (>=3.1.2,<4.0.0)",
    "requests (>=2.32.5,<3.0.0)",
    "backrefs (>=6.0.1,<7.0.0)",
    "mypy (>=1.17.1,<2.0.0)"
]
dynamic = ["version", "readme", "classifiers"]

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-randomly = "*"
pre-commit = "*"

[tool.setuptools.packages.find]
where = ["src"]

[tool.poetry]
version = "0.1.0"
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = ">=3.13"
autogen-agentchat = "*"
autogen-ext = "*"
openai = "*"
tiktoken = "*"
google-auth = "2.14.0"

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-randomly = "*"

[tool.poetry.group.type_check.dependencies]
mypy = "*"
types-redis = "*"
types-flask = "*"
types-requests = "*"

[tool.poetry.group.lint.dependencies]
ruff = "*"
bandit = {extras = ["toml"], version = "*"}
mypy = "*"
types-redis = "*"
types-flask = "*"
types-requests = "*"

[tool.ruff]
line-length = 99
src = ["src/agentic_crypto_influencer"]

[tool.ruff.lint]
select = [
    "F", # pyflakes
    "E", # pycodestyle
    "I", # isort
    "N", # pep8-naming
    "UP", # pyupgrade
    "RUF", # ruff
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "PIE", # flake8-pie
    "PT", # flake-pytest-style
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
]
extend-ignore = [
    "RUF005",
    "RUF012",
]
unfixable = [
    # Disable removing unused imports by default and only enable within nox so editors don't delete
    # unused imports while the user is in the middle of editing a file on save.
    "F401",
]

[tool.ruff.lint.isort]
force-sort-within-sections = true
split-on-trailing-comma = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.pytest.ini_options]
addopts = [
    "--strict-config",
    "--strict-markers",
]
xfail_strict = true
filterwarnings = [
    # When running tests, treat warnings as errors (e.g. -Werror).
    # See: https://docs.pytest.org/en/latest/reference/reference.html#confval-filterwarnings
    "error",
    # Ignore AsyncMock warnings that are not actual test failures
    "ignore::pytest.PytestUnraisableExceptionWarning",
    # Add additional warning suppressions as needed here. For example, if a third-party library
    # is throwing a deprecation warning that needs to be fixed upstream:
    # "ignore::DeprecationWarning:typer",
]

[tool.coverage.run]
branch = true

# To globally exclude additional code blocks from code coverage reporting, see:
# https://coverage.readthedocs.io/en/latest/excluding.html#advanced-exclusion
[tool.coverage.report]
exclude_also = [
    "case _ as unreachable",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "@abstractmethod",
]

[tool.mypy]
ignore_missing_imports = true
strict = true
enable_error_code = ["deprecated", "exhaustive-match", "explicit-override"]
explicit_package_bases = true
warn_unused_ignores = false

[tool.bandit]
exclude_dirs = ["tests", ".git", "__pycache__", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert checks and shell usage warnings